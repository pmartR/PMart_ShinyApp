# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, 4))[,3]), 2)}
return(
list(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})
theCompounds <- Anno30$`Compound Name` %>% unique()
# Simulate losing one compound each time
lapply(5:(length(theCompounds) - 1), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, 4))[,3]), 2)}
return(
list(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})
theCompounds <- Anno30$`Compound Name` %>% unique()
# Simulate losing one compound each time
lapply(1:(length(theCompounds) - 1), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, 4))[,3]), 2)}
browser()
return(
list(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3))
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25))
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25))
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5))
theCompounds <- Anno30$`Compound Name` %>% unique()
# Simulate losing one compound each time
lapply(1:(length(theCompounds) - 4), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, 4))[,3]), 2)}
return(
list(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})
theCompounds <- Anno30$`Compound Name` %>% unique()
# Simulate losing one compound each time
lapply(1:(length(theCompounds) - 5), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, 4))[,3]), 2)}
return(
list(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})
# Simulate losing one compound each time
do.call(rbind, lapply(1:(length(theCompounds) - 5), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, 4))[,3]), 2)}
return(
list(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
}))
theCompounds <- Anno30$`Compound Name` %>% unique()
# Simulate losing one compound each time
compoundRemoval <- function(clusterNum) {
do.call(rbind, lapply(1:(length(theCompounds) - clusterNum + 1), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, clusterNum))[,3]), 2)}
return(
list(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})) %>% data.frame()
}
compoundRemoval(4)
theCompounds <- Anno30$`Compound Name` %>% unique()
# Simulate losing one compound each time
compoundRemoval <- function(clusterNum) {
do.call(rbind, lapply(1:(length(theCompounds) - (clusterNum + 1)), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, clusterNum))[,3]), 2)}
return(
list(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})) %>% data.frame()
}
compoundRemoval(4)
theCompounds <- Anno30$`Compound Name` %>% unique()
# Simulate losing one compound each time
compoundRemoval <- function(clusterNum) {
do.call(rbind, lapply(1:(length(theCompounds) - (clusterNum + 1)), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, clusterNum))[,3]), 2)}
return(
c(
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})) %>% data.frame()
}
compoundRemoval(4)
compoundRemoval(4)
compoundRemoval(5)
compoundRemoval(4)
DF <- compoundRemoval(4)
DF
theCompounds <- Anno30$`Compound Name` %>% unique()
# Simulate losing one compound each time
compoundRemoval <- function(clusterNum) {
do.call(rbind, lapply(1:(length(theCompounds) - (clusterNum + 1)), function(removal_number) {
# Create a test variable to hold compound names
SWD_test <- SWD
SWD_test$Compound <- lapply(theCompounds, function(x) {rep(x, length(theCompounds))}) %>% unlist()
# Remove all instances of a compound
SWD_test <- SWD_test[SWD_test$Compound %in% tail(theCompounds, removal_number) == FALSE,]
# Remove the last entry per compound
SWD_test <- do.call(rbind, lapply(SWD_test$Compound %>% unique(), function(CN) {
sub <- SWD_test[SWD_test$Compound == CN,]
return(sub %>% head(removal_number * -1))
}))
# Create distance matrices
locDist_test <- as.dist(matrix(SWD_test$location, ncol = length(unique(SWD_test$Compound))))
sizeDist_test <- as.dist(matrix(SWD_test$size, ncol =  length(unique(SWD_test$Compound))))
shapeDist_test <- as.dist(matrix(SWD_test$shape, ncol = length(unique(SWD_test$Compound))))
# Combine the metric
metricCombine_test <- function(locPerc, sizePer, shapePer) {
(locDist_test / max(locDist_test)) * (locPerc) + (sizeDist_test / max(sizeDist_test)) * (sizePer) +
(shapeDist_test / max(shapeDist_test)) * (shapePer)
}
# Get silhouette score
getSil <- function(dist) {round(mean(silhouette(pam(dist, clusterNum))[,3]), 2)}
return(
c(
"Number of Compounds" = length(theCompounds) - removal_number + 1,
"Equal Metrics" = getSil(metricCombine_test(1/3, 1/3, 1/3)),
"Location Dominant" = getSil(metricCombine_test(0.5, 0.25, 0.25)),
"Size Dominant" = getSil(metricCombine_test(0.25, 0.5, 0.25)),
"Shape Dominant" = getSil(metricCombine_test(0.25, 0.25, 0.5)),
"No Shape" = getSil(metricCombine_test(0.5, 0.5, 0)),
"No Size" = getSil(metricCombine_test(0.5, 0, 0.5))
)
)
})) %>% data.frame()
}
compoundRemoval(4)
?pivot_longer
?one_of
?is_exactly
compoundRemoval(4) %>%
pivot_longer(cols = oneof(Equal.Metrics, Location.Dominant, Size.Dominant, Shape.Dominant,
No.Shape, No.Size))
compoundRemoval(4) %>%
pivot_longer(cols = one_of(Equal.Metrics, Location.Dominant, Size.Dominant, Shape.Dominant,
No.Shape, No.Size))
compoundRemoval(4)
compoundRemoval(4) %>%
pivot_longer(cols = one_of(c(Equal.Metrics, Location.Dominant, Size.Dominant, Shape.Dominant,
No.Shape, No.Size)))
compoundRemoval(4) %>%
pivot_longer(cols = !Number.of.Compounds)
DF <- compoundRemoval(4) %>% pivot_longer(cols = !Number.of.Compounds)
colnames(DF)
ggplot(DF, aes(x = Number.of.Compounds, y = value, group = name, color = name)) +
geom_line()
DF <- compoundRemoval(4) %>% pivot_longer(cols = !Number.of.Compounds) %>%
rename(value = "Silhouette.Score", name = "Consensus Metric")
DF <- compoundRemoval(4) %>% pivot_longer(cols = !Number.of.Compounds) %>%
rename(Silhouette.Score = value, Consensus.Metric = name)
ggplot(DF, aes(x = Number.of.Compounds, y = Silhouette.Score, group = Consensus.Metric, color = Consensus.Metric)) +
geom_line() + theme_bw()
ggplot(DF, aes(x = Number.of.Compounds, y = Silhouette.Score, group = Consensus.Metric, color = Consensus.Metric)) +
geom_point() + theme_bw()
ggplot(DF, aes(x = Number.of.Compounds, y = Silhouette.Score, group = Consensus.Metric, color = Consensus.Metric)) +
geom_point() + theme_bw() + ggtitle(paste("Number of clusters:", 4))
makeCompRemovPlot <- function(clusterNum) {
DF <- compoundRemoval(clusterNum) %>% pivot_longer(cols = !Number.of.Compounds) %>%
rename(Silhouette.Score = value, Consensus.Metric = name)
ggplot(DF, aes(x = Number.of.Compounds, y = Silhouette.Score, group = Consensus.Metric, color = Consensus.Metric)) +
geom_point() + theme_bw() + ggtitle(paste("Number of clusters:", clusterNum))
}
makeCompRemovPlot(2) + makeCompRemovPlot(3)
makeCompRemovPlot(4) + makeCompRemovPlot(5)
makeCompRemovPlot(6) + makeCompRemovPlot(7)
makeCompRemovPlot(8) + makeCompRemovPlot(9)
makeCompRemovPlot(2) / makeCompRemovPlot(3)
makeCompRemovPlot(2) / makeCompRemovPlot(3)
makeCompRemovPlot(4) / makeCompRemovPlot(5)
makeCompRemovPlot(6) / makeCompRemovPlot(7)
makeCompRemovPlot(8) / makeCompRemovPlot(9)
makeCompRemovPlot <- function(clusterNum) {
DF <- compoundRemoval(clusterNum) %>% pivot_longer(cols = !Number.of.Compounds) %>%
rename(Silhouette.Score = value, Consensus.Metric = name)
ggplot(DF, aes(x = Number.of.Compounds, y = Silhouette.Score, group = Consensus.Metric, color = Consensus.Metric)) +
geom_point() + theme_bw() + ggtitle(paste("Number of clusters:", clusterNum)) + ylim(c(0.2, 0.8))
}
makeCompRemovPlot(2) / makeCompRemovPlot(3)
makeCompRemovPlot(4) / makeCompRemovPlot(5)
makeCompRemovPlot(6) / makeCompRemovPlot(7)
makeCompRemovPlot(8) / makeCompRemovPlot(9)
Equal <- metricCombine(1/3, 1/3, 1/3)
PCA_plotly <- function(PAM, factorGroup) {
plot_ly(x = PAM$x[,1], y = -PAM$x[,2], color = as.factor(factorGroup),
symbol = as.factor(factorGroup), size = 4, hoverinfo = "text",
hovertext = paste("Metabolite:", Anno30_Metadata$Compound.Name), type = "scatter",
mode = "markers")
}
prcomp(pam(Equal, 3)$data) %>% PCA_plotly()
prcomp(pam(Equal, 3)$data)
pam(Equal, 3)
pam(Equal, 3)$data
pam(Equal, 3)
test <- pam(Equal, 3)
test$clusinfo
test$medoids
View(test)
SWD
pam(Equal, 3)
pam(Equal, 3) %>% as.dendrogram()
pam(Equal, 3)
Anno30_Stat$Skew
Anno30_Stats$Skew
Equal <- metricCombine(1/3, 1/3, 1/3)
hc <- hclust(Equal)
dend <- as.dendrogram(hc)
plot(dend)
Equal <- metricCombine(1/3, 1/3, 1/3)
prcomp(pam(SWD, 3)$data) %>% PCA_plotly()
PCA_plotly <- function(PAM, factorGroup) {
plot_ly(x = PAM$x[,1], y = -PAM$x[,2], color = as.factor(factorGroup),
symbol = as.factor(factorGroup), size = 4, hoverinfo = "text",
hovertext = paste("Metabolite:", Anno30_Stats$`Compound Name`), type = "scatter",
mode = "markers")
}
prcomp(pam(SWD, 3)$data) %>% PCA_plotly()
pam(SWD, 3)
pam(SWD, 3)$data
pam(Equal)
Equal <- metricCombine(1/3, 1/3, 1/3)
pam(Equal, 3)
prcomp(SWD)
prcomp(Equal)
Equal
pam(SWD, 3)$data
pam(SWD, 4)$data
read.csv("/Users/degn400/Desktop/PNNL_Images_Scale.csv")
images <- read.csv("/Users/degn400/Desktop/PNNL_Images_Scale.csv")
images$Sample.Name %>%
strsplit("/")
images$Sample.Name %>%
strsplit("/") %>%
lapply(function(x) {head(x, 1)})
images$Sample.Name %>%
strsplit("/") %>%
lapply(function(x) {head(x, 1)}) %>%
unlist() %>%
table()
shiny::runApp('Desktop/Git_Repos/pmart_standalone')
pmart_inputs <- reactiveValuesToList(input)
input$transform
con <- map_data_connection(config_file="~/tmp/minio_config.yml")
library(mapDataAccess)
con <- map_data_connection(config_file="~/tmp/minio_config.yml")
tags <- list(key1="value1", key2="value2")
id3 <- put_data(con, iris, tags=tags)
tags2 <- get_tags(con, id3)
setdiff(tags, tags2) # should be empty list
tags3 <- list(key3="value3", key4="value4")
set_tags(con, id3, tags3)
tags4 <- get_tags(con, id3)
setdiff(tags3, tags4) # should be empty list
delete_tags(con, id3)
tags5 <- get_tags(con, id3)
length(tags5) == 0
?set_tags
set_tags(con, id3, tags)
tags2 <- get_tags(con, id3)
tags2
setdiff(tags, tags2)
?put_data
pep <- put_data(con, "~/Downloads/pep_edata.csv")
pep <- put_file(con, "~/Downloads/pep_edata.csv")
pep <- put_file(con, "/Users/degn400//Downloads/pep_edata.csv")
set_tags(con, pep, tags = list(datatype = "edata", projecttype = "peptides"))
get_tag(pep)
get_tags(pep)
get_tags(con, pep)
delete_tags(con, pep)
get_tags(con, pep)
?mapDataAccess::remove_data
runApp('Desktop/Git_Repos/pmart_standalone')
runApp('Desktop/Git_Repos/pmart_standalone')
shiny::runApp('Desktop/Git_Repos/pmart_standalone')
runApp('Desktop/Git_Repos/pmart_standalone')
